---
alwaysApply: true
---

### מדיניות קבצי קונפיגורציה

1. קובץ `.env` יכיל אך ורק סודות:
   - כל הסודות שנמצאים בקובץ `config.ts`

2. אתה תמיד מניח שקיים קובץ `.env` בכל אפליקציה בסביבת הפיתוח אבל אין לך גישה לקרוא אותו. תשתמש בקובץ `env.example` כדי להבין אילו משתנים יכולים להיות בקובץ `.env`.

3. קובץ `config.ts` יכיל את כל יתר ההגדרות, כולל:
   - פורטים (PORT_HTTP, PORT_HTTPS)
   - בחירה דינמית בין HTTP ל־HTTPS בהתאם ל־SSL_ENABLED
   - נתיבי תעודות SSL
   - ערכי CLIENT_URL ו־CLIENT_ORIGIN
   - ערכי ברירת מחדל ל־BCRYPT_ROUNDS וכל שאר ההגדרות הלא רגישות

4. הגדרות הקובץ `config.ts` ינוהלו במבנה TypeScript חזק (interface + const) כדי לשמור על עקביות בין סביבת הפיתוח לסביבת ההפקה.

5. אין ליצור או לעדכן קובץ `.env` באופן אוטומטי בתהליכים.
   אם יש צורך לעדכן ערכים, יש ליצור קובץ זמני עם סיומת `.example`.

6. בעת הפעלת HTTPS, יש להשתמש בתעודות מתוך:
   `apps/server/certs/server.crt`
   `apps/server/certs/server.key`

---

### עקרונות כלליים

- כל אפליקציה (server, web, mobile) תאזין לפורט ייחודי כדי למנוע התנגשויות בעת הפעלה מקבילית.
- ברירות מחדל ינוהלו בקוד (`config.ts`), לא בקובץ `.env`.
- קונפיגורציות סביבתיות נוספות (production, staging, development) יישמרו בקבצים נפרדים (`config.production.ts` וכו’) בהתאם לצורך.

---

### סדר טעינת הקונפיגורציה

1. **config.ts**  
   הקובץ המרכזי שמכיל את ברירות המחדל והלוגיקה הכללית של סביבת הפיתוח.  
   הוא כולל את כל ההגדרות שאינן רגישות: פורטים, נתיבים, כתובות לקוח, דגלי SSL, ועוד.  
   כל ערך מוגדר מראש בקובץ זה עם טיפוס TypeScript קשיח (interface).

2. **dotenv / .env**  
   נטען מיד לאחר config.ts לצורך הזרקת סודות בלבד (secrets).  
   ערכים המוגדרים בקובץ `.env` ידרסו רק פרמטרים בעלי אותו שם ב־`process.env`.  
   אין להשתמש ב־.env להגדרות שאינן סודיות.

3. **process.env**  
   משמש כשכבה האחרונה — מאפשר הגדרות שמגיעות מסביבת ההרצה בפועל (כמו Render, AWS, או Docker Compose).  
   ערכים מכאן גוברים על ערכים מה־.env וה־config.ts במקרה של התנגשות.

4. **עדיפות טעינה**  
   הסדר הסופי שבו הערכים נקבעים:
   - `process.env` (העדיפות הגבוהה ביותר)
   - `.env`
   - `config.ts` (ברירת מחדל)

5. **עקרון "Single Source of Truth"**  
   כל ערך הגדרה חייב להיות מוגדר במפורש במקום אחד בלבד.  
   אם מדובר בסוד – הוא מוגדר ב־.env.  
   אם מדובר בערך תפעולי – הוא מוגדר ב־config.ts.  
   ערכים שמגיעים מבחוץ (production או CI/CD) לא ישנו את מבנה הקונפיגורציה אלא רק יספקו נתונים חלופיים.

---

### הנחיות כלליות לתחזוקה

- אין לגשת ישירות ל־`process.env` בקוד היישום; יש להשתמש רק ב־`config`.
- כל משתנה חדש יתווסף תחילה ל־interface של הקובץ `config.ts`.
- במידה ונדרש ערך חדש בסביבת ההפקה בלבד, יש להוסיף אותו לקובץ ייעודי (כגון `config.production.ts`) ולהתאים את הלוגיקה בהתאם.
- בעת בדיקות (testing), ניתן להשתמש בקובץ `config.test.ts` עם הגדרות מקומיות.

---

### מטרה

לשמור על מבנה קונפיגורציה עקבי, צפוי ובטוח בכל סביבות ההרצה של המונוריפו.
