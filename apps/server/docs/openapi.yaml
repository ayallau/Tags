openapi: 3.0.0
info:
  title: Tags API
  description: API for Tags application with authentication and user management
  version: 1.0.0
  contact:
    name: Tags Team
servers:
  - url: http://localhost:3001
    description: Development server
paths:
  /:
    get:
      summary: Welcome message
      description: Basic welcome message with links to documentation
      responses:
        "200":
          description: Welcome message
          content:
            text/html:
              schema:
                type: string
                example: "Welcome to the server!<br>OpenAPI: <a href='/openapi.yaml'>openapi.yaml</a> | Swagger UI: <a href='/docs'>docs</a>"

  /api/me:
    get:
      summary: Get current user
      description: Get information about the currently authenticated user
      security:
        - cookieAuth: []
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing token"

  /auth/login:
    post:
      summary: Login with email and password
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      name:
                        type: string
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"

  /auth/register:
    post:
      summary: Register new user
      description: Create a new user account with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                name:
                  type: string
                  example: "John Doe"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      name:
                        type: string
        "400":
          description: Bad request - User already exists or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User already exists"

  /auth/google:
    get:
      summary: Google OAuth login
      description: Initiate Google OAuth authentication
      responses:
        "302":
          description: Redirect to Google OAuth
        "500":
          description: OAuth configuration error

  /auth/google/callback:
    get:
      summary: Google OAuth callback
      description: Handle Google OAuth callback
      parameters:
        - name: code
          in: query
          required: false
          schema:
            type: string
        - name: error
          in: query
          required: false
          schema:
            type: string
      responses:
        "302":
          description: Redirect after authentication
        "500":
          description: Authentication error

  /auth/logout:
    post:
      summary: Logout user
      description: Logout the current user
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not authenticated"

  /auth/forgot-password:
    post:
      summary: Request password reset
      description: Send password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
      responses:
        "200":
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset email sent"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

  /auth/reset-password:
    post:
      summary: Reset password
      description: Reset password using token from email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                  example: "reset-token-from-email"
                password:
                  type: string
                  format: password
                  example: "newpassword123"
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful"
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired token"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
      description: JWT access token stored in HTTP-only cookie

security:
  - cookieAuth: []
